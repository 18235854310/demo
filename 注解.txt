一：mybatis注解:
mapper文件：<mapper class="com.dao.StudentDao"></mapper>
用法：
     //增
    @Insert("insert into student(stuname) values (#{stuname})")
    @Options(useGeneratedKeys = true, keyProperty ="stuid" )
    public void insert(Stu name);
    //删
    @Delete("delete from student where stuid=#{stuid}")
    public void delete(int id);
    //改
    @Update("update student set stuname=#{stuname} where stuid=#{stuid}")
    public void update(Stu stu);
    //查
    @Select("select * from student")
    @ResultType(Stu.class)
    /*@Results({
            @Result(column = "stuid",property = "stuid")
            })*/
   // @ResultMap("com.qf.dao.StudentDao.id")
    public List<Stu> findAll();
二：lombok插件注解:
安装jar包:
   <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.2</version>
            <scope>provided</scope>
   </dependency>
lombok的使用
	@Data  注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提		供了equals、canEqual、hashCode、toString 方法

	@Setter ：注解在属性上；为属性提供 setting 方法

	@Getter ：注解在属性上；为属性提供 getting 方法

	@Log4j  ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象

	@NoArgsConstructor ：注解在类上；为类提供一个无参的构造方法

	@AllArgsConstructor ：注解在类上；为类提供一个全参的构造方法

	@Cleanup  : 可以关闭流

	@Builder  ： 被注解的类加个构造者模式

	@Synchronized  ： 加个同步锁

	@SneakyThrows : 等同于try/catch 捕获异常

	@NonNull : 如果给参数加个这个注解 参数为null会抛出空指针异常

	@Value : 注解和@Data类似，区别在于它会把所有成员变量默认定义为private 	final修饰，并且不会生成set方法。
三：spring注解实现ioc:
配置文件中添加约束：
	<?xml version="1.0" encoding="UTF-8"?>
	<beans xmlns="http://www.springframework.org/schema/beans"
       		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

       		xmlns:p="http://www.springframework.org/schema/p"

       		xmlns:aop="http://www.springframework.org/schema/aop"

       		xmlns:context="http://www.springframework.org/schema/context"

       		xsi:schemaLocation="
       		http://www.springframework.org/schema/beans
       		http://www.springframework.org/schema/beans/spring-beans.xsd

       		http://www.springframework.org/schema/context
       		http://www.springframework.org/schema/context/spring-	        context.xsd

       		http://www.springframework.org/schema/aop
       		http://www.springframework.org/schema/aop/spring-aop.xsd
   ">

		<!--设置扫描注解包，context命名空间-->

		<context:component-scan base-				package="com.qf"></context:component-scan>
		<!--启动aspectJ的注解方式-->
    		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	</beans>
用法
	3.1 添加在类名上
	@Component("对象名")
	@Service("person") 	// service层
	@Controller("person") 	// controller层
	@Repository("person")	// dao层
	@Scope(scopeName="singleton")
	@Scope(scopeName="prototype")
	3.2 添加在属性上:
	@Value("属性值")
	private String name;

	@Autowired //如果一个接口类型，同时有两个实现类，则报错，此时可以借助	@Qualifier("bean name")     
	@Qualifier("bean name")
	private Car car; 

	//说明:@Resource 是java的注释,但是Spring框架支持,@Resource指定注入哪	个名称的对象
	@Resource(name="对象名") == @Autowired  + @Qualifier("name")
	@Resource("baoma") 
	private Car car; 

	3.3 添加在方法上
 	@PostConstruct
 	public  void init(){
  	 System.out.println("初始化方法");

 	@PreDestroy
 	public void destroy(){
 	  System.out.println("销毁方法");
 	}
四：spring注解实现aop
1.增强类也需要创建对象(使用@Component)
2.要启动扫描spring注解包的代码: 
<context:component-scan base-package="com.qf"></context:component-scan>
3.除了启动spring的注解之外 还要启动aspectJ的注解方式
			    <aop:aspectj-autoproxy/> 
用法：
	@Component
	@Aspect
	public class AopUtil03 {
   	 //定义切入点
    	@Pointcut("execution(* com.qf.service..*.*(..))")
    	public void a1(){}
   	 //前
   	 @Before("a1()")
   	 public void beforemethod(){
      	  System.out.println("前置2");
   	 }
  	  //后
   	 @AfterReturning("a1()")
   	 public void after(){
       	 System.out.println("后置2");
   	 }
   	 //最终
   	 @After("a1()")
   	 public void afterall(){
       	 System.out.println("最终2");
  	  }
   	 //异常
   	 @AfterThrowing("a1()")
   	 public void exception(){
       	 System.out.println("异常2");
    	}
   	 //环绕（前+后）
   	 @Around("a1()")
   	 public void around(ProceedingJoinPoint point){
      	  System.out.println("开始2");
       	 try {
       	     point.proceed();
       	 } catch (Throwable throwable) {
      	      throwable.printStackTrace();
      	  }
      	  System.out.println("结束2");
  	  }
	}
